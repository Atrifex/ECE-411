Testing is a very important part of the design process. Due to this, a design must be put through rigorous tests to make sure that it is actually working. To test my design, I decided to use a 2 phase testing process. The first phase was a basic visual verification phase. During this phase, I made sure that all of the modules in the datapath and the mp1 top-level module were connected correctly. To do this, I used the RTL viewer functionality that is built into Quartus. Going through this simple visual check allowed me verify that the design did not have have any connection related issues. The next part of the visual verification phase was to use the state machine viewer in Quartus. Through the use of this tool, I was able to make sure that there werenâ€™t any obvious mistakes in the state transitions. Through the use of visual verification, I was able to catch quite a few simple bugs and thus speed up the verification process.

Once the visual verification phase had ended, the code based verification phase began. Using code based verification was very important because it revealed insidious bugs that could not have been caught visually. I wrote a total of 11 programs that tested each targeted instruction or pairs of instructions. The code was written to test edge cases and make sure that all combinations of a given instructions would work correctly. For example, in the test program for the SHF instruction, all 16 immediate values were used for left and right shifting of register values. On top of this, multiple combinations of source and destination registers were also used to check for any edge case situations. Like this test program, all programs tested multiple combinations of inputs and offsets. As a result, this allowed for verification of design functionality.

Once the program was written and working correctly in the LC3bSimulator, it was loaded into the design and simulated using ModelSim. To make sure that the program was being executed correctly on the designed LC3, I stepped through each instruction while constantly comparing the register values in ModelSim to those in LC3bSimulator. Once a program had finished executing, I compared the values in memory for my design to that of the LC3bSimulator. I then repeated this process for each of the test programs that I had written. Since all of them were executed successfully and all results in ModelSim matched those in the LC3bSimulator, I believe that I can safely claim that my design would be able to successfully execute any test program loaded into it.


